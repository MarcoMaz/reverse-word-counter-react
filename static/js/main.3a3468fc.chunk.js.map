{"version":3,"sources":["components/Intro.js","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Intro","_useContext","useContext","Rev","visible","words","setVisible","setWords","react_default","a","createElement","id","style","display","block","type","min","data-required-message","value","needed","onChange","e","target","written","required","onClick","none","Counter","result","limWords","maxlength","createContext","Reversed","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","wordCount","trim","split","length","Provider","components_Intro","components_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NA6BeA,SA1BD,WAAM,IAAAC,EAC8BC,qBAAWC,GAApDC,EADWH,EACXG,QAASC,EADEJ,EACFI,MAAOC,EADLL,EACKK,WAAYC,EADjBN,EACiBM,SAEpC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,MAAO,CAACC,QAAST,EAAQU,QACxCN,EAAAC,EAAAC,cAAA,iDACQF,EAAAC,EAAAC,cAAA,SACEK,KAAK,SACLC,IAAI,IACJC,wBAAsB,kCACtBC,MAAQb,EAAMc,OACdC,SAAW,SAACC,GAAD,OAAOd,EAAS,CACxBY,OAAQE,EAAEC,OAAOJ,MACjBK,QAAS,MAEZC,UAAQ,IAEThB,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBAAMnB,EAAW,CACjCQ,MAAO,OACLY,KAAM,YAFT,SCIGC,EArBC,WAAM,IAAA1B,EACmCC,qBAAWC,GAA1DC,EADYH,EACZG,QAASC,EADGJ,EACHI,MAAOE,EADJN,EACIM,SAAUqB,EADd3B,EACc2B,OAAQC,EADtB5B,EACsB4B,SAE1C,OACErB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,MAAO,CAACC,QAAST,EAAQsB,OACtClB,EAAAC,EAAAC,cAAA,YACIkB,GAAU,GAAKpB,EAAAC,EAAAC,cAAA,wBAAiBkB,GAClCpB,EAAAC,EAAAC,cAAA,YACEU,SAAW,SAACC,GAAD,OAAOd,EAAS,CACzBY,OAAQd,EAAMc,OACdI,QAASF,EAAEC,OAAOJ,SACpBY,UAAYD,EACZX,MAAQb,EAAMkB,QACdR,KAAK,UAGPa,EAAS,GAAKpB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAN,gDCdTR,EAAM4B,0BA2BJC,MAzBf,WAAmB,IAAAC,EACWC,mBAAS,CACnCf,OAAQ,EACRI,QAAS,KAHMY,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACT5B,EADS8B,EAAA,GACF5B,EADE4B,EAAA,GAAAG,EAKeJ,mBAAS,CACvCpB,MAAO,QACPY,KAAM,SAPSa,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAKTlC,EALSmC,EAAA,GAKAjC,EALAiC,EAAA,GAUXC,EAA8B,KAAlBnC,EAAMkB,QAAiB,EAAIlB,EAAMkB,QAAQkB,OAAOC,MAAM,KAAKC,OACvEf,EAASvB,EAAMc,OAASqB,EACxBX,EAAWxB,EAAMc,OAASqB,EAAY,EAAInC,EAAMkB,QAAQoB,OAAS,KAEvE,OACEnC,EAAAC,EAAAC,cAACP,EAAIyC,SAAL,CAAc1B,MAAO,CAACd,UAASC,QAAOC,aAAYC,WAAUqB,SAAQC,aAClErB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,SCdYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3a3468fc.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Rev } from '../App'\n\nconst Intro = () => {\n\tconst { visible, words, setVisible, setWords } = useContext(Rev)\n\n\treturn (\n\t\t<div id=\"intro\" style={{display: visible.block}}>\n\t\t\t<p>How many words do you have to write?</p>\n          \t<input\n            \ttype=\"number\"\n            \tmin='2'\n            \tdata-required-message=\"E-Mail or Username is required!\"\n            \tvalue={ words.needed }\n            \tonChange={ (e) => setWords({ \n              \t\tneeded: e.target.value, \n              \t\twritten: ''\n            \t})}            \n            \trequired>\n            </input>\n            <button onClick={() => setVisible({\n            \tblock: 'none',\n              \tnone: 'block'\n            \t})}>Go\n            </button>          \n        </div>\n        )\n}\n\nexport default Intro","import React, { useContext } from 'react';\nimport { Rev } from '../App'\n\nconst Counter = () => {\n  const { visible, words, setWords, result, limWords } = useContext(Rev)\n\t\n  return (\n    <div id=\"work\" style={{display: visible.none}}>\n      <form>\n        { result >= 0 && <p>Words left: { result }</p> }\n        <textarea\n          onChange={ (e) => setWords({\n            needed: words.needed,\n            written: e.target.value})}\n          maxlength={ limWords }\n          value={ words.written }\n          type=\"text\">\n        </textarea>\n      </form>\n      { result < 0 && <p id=\"excess\">You exceeded the maximum number of words!!</p> }\n    </div>\n    )\n  }\n\nexport default Counter","import React, { useState, createContext } from 'react';\nimport './App.scss';\nimport Intro from \"./components/Intro\"\nimport Counter from \"./components/Counter\"\n\nexport const Rev = createContext()\n\nfunction Reversed(){\n  const [ words, setWords ] = useState({\n    needed: 2,\n    written: ''\n    })\n  const [ visible, setVisible ] = useState({\n    block: 'block',\n    none: 'none'\n    })\n\n  const wordCount = words.written === '' ? 0 : words.written.trim().split(' ').length\n  const result = words.needed - wordCount\n  const limWords = words.needed - wordCount < 0 ? words.written.length : null\n\n  return(\n    <Rev.Provider value={{visible, words, setVisible, setWords, result, limWords}}>\n      <div id=\"container\">\n        <h1>Reverse Word Counter</h1>\n        <Intro/>\n        <Counter/>\n      </div>\n    </Rev.Provider>\n    )\n}\n\nexport default Reversed;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}